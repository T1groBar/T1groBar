from telethon import TelegramClient, events, Button
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot_token = '7453960039:AAG5x4YxOz3IRrn5xPPkY7Qa2-DoIU7s9Ms'
api_id = '18778182'
api_hash = 'f5adaf2bbb96d97ff4443fdc0c4ddb38'
admin_ids = {5722874142, 1681831330, 7007999791}

client = TelegramClient('feedback_bot', api_id, api_hash).start(bot_token=bot_token)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
user_states = {}
responding_users = {}
message_ids = {}
blocked_users = set()
blocked_users_notified = set()

def generate_unique_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞."""
    return random.randint(99999, 999999999)

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    if event.sender_id in blocked_users:
        if event.sender_id not in blocked_users_notified:
            await event.respond("‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            blocked_users_notified.add(event.sender_id)
        return
    await event.respond(
        "üïµÔ∏è–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –±–æ—Ç–∞ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É\n\n"
        "‚úèÔ∏è–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–º –Ω–∞–ø–∏—Å–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å: ¬´–ù–ê–ü–ò–°–ê–¢–òüí¨¬ª",
        buttons=[Button.inline('–ù–ê–ü–ò–°–ê–¢–òüí¨', '–ù–ê–ü–ò–°–ê–¢–ò')]
    )

@client.on(events.CallbackQuery)
async def handle_query(event):
    data = event.data.decode('utf-8')

    if event.sender_id in blocked_users:
        if event.sender_id not in blocked_users_notified:
            await event.respond("‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            blocked_users_notified.add(event.sender_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
    message = await event.get_message()

    if data == '–ù–ê–ü–ò–°–ê–¢–ò':
        user_states[event.sender_id] = 'awaiting_feedback'
        await event.respond(
            "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—É ¬´–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É¬ª.\n\n"
            "‚åõ–ù–∞–π–±–ª–∏–∂—á—ñ 24 –≥–æ–¥–∏–Ω–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ!"
        )
        await message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    elif data == '–ì–æ–ª–æ–≤–Ω–µ_–º–µ–Ω—é':
        await event.respond(
            "üïµÔ∏è–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –±–æ—Ç–∞ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É ¬´–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É¬ª\n\n"
            "‚úèÔ∏è–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–º –Ω–∞–ø–∏—Å–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å: ¬´–ù–ê–ü–ò–°–ê–¢–òüí¨¬ª",
            buttons=[Button.inline('–ù–ê–ü–ò–°–ê–¢–òüí¨', '–ù–ê–ü–ò–°–ê–¢–ò')]
        )
        await message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    elif data.startswith('–í–Ü–î–ü–û–í–Ü–°–¢–ò'):
        parts = data.split('_')
        if len(parts) > 1:
            user_id_to_respond = int(parts[1])
            user_states[event.sender_id] = 'awaiting_message'
            responding_users[event.sender_id] = user_id_to_respond
            await event.respond("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∏–∂—á–µ:",
                                buttons=[Button.inline('–ó–ê–í–ï–†–®–ò–¢–ò', f'–ó–ê–í–ï–†–®–ò–¢–ò_{event.sender_id}')])
            try:
                await client.send_message(user_id_to_respond, 
                                          "üëÅÔ∏è–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ —Ä–æ–∑–≥–ª—è–¥–∞—é—Ç—å!\n‚ö°–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_respond}: {e}")
    elif data.startswith('–ó–ê–í–ï–†–®–ò–¢–ò'):
        parts = data.split('_')
        if len(parts) > 1:
            admin_id = int(parts[1])
            if admin_id in responding_users:
                user_id_to_respond = responding_users.pop(admin_id, None)
                if user_id_to_respond:
                    await client.send_message(user_id_to_respond, "__```üö´–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–∫–∏–Ω—É–ª–∞ —Ä–æ–∑–º–æ–≤—Éüö´```__\n\n**üôà–Ø–∫—â–æ –±—É–¥–µ–º–æ —â–µ –∫–æ—Ä–∏—Å–Ω—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è**")
                    await event.respond("üõë–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω–∞—Ç–∏ —ñ–Ω—à—ñ –¥—ñ—ó.")
                    await message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    elif data.startswith('BLOCK'):
        parts = data.split('_')
        if len(parts) > 1:
            user_id_to_block = int(parts[1])
            blocked_users.add(user_id_to_block)
            blocked_users_notified.add(user_id_to_block)
            await client.send_message(user_id_to_block, "**__üîí–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.__**")
            await event.respond("‚úÖ–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
    elif data.startswith('UNBLOCK'):
        parts = data.split('_')
        if len(parts) > 1:
            user_id_to_unblock = int(parts[1])
            if user_id_to_unblock in blocked_users:
                blocked_users.remove(user_id_to_unblock)
                blocked_users_notified.discard(user_id_to_unblock)
                await event.respond("‚úÖ–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
                await client.send_message(user_id_to_unblock, "**üü¢–í–∏ –±—É–ª–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.**")
            else:
                await event.respond("```‚ùå–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.```")

@client.on(events.NewMessage)
async def handle_user_message(event):
    if event.is_private and event.sender_id not in admin_ids:
        if event.sender_id in blocked_users:
            if event.sender_id not in blocked_users_notified:
                await event.respond("‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                blocked_users_notified.add(event.sender_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ñ–∞–π–ª–æ–≤
        if event.voice or event.photo or event.video or event.file:
            await event.respond(
                "**‚ùå–ù–∞–∂–∞–ª—å –º–∏ –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:** "
                "**–ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–§–æ—Ç–æ/–í—ñ–¥–µ–æ/–§–∞–π–ª–∏.**\n\n"
                "__ü´∂–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –æ–ø–∏—à—ñ—Ç—å —ó—Ö –∫—Ä–∞—â–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ —ñ –º–∏ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫ —É–º–æ–≥–∞ —à–≤–∏–¥—à–µ!__",
               buttons=[
            [Button.inline('–ù–ê–ü–ò–°–ê–¢–ò üí¨', '–ù–ê–ü–ò–°–ê–¢–ò')],  # –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ö—É
            [Button.inline('–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ', '–ì–æ–ª–æ–≤–Ω–µ_–º–µ–Ω—é')]  # –ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É
        ]
    )
            return

        state = user_states.get(event.sender_id)
        if state == 'awaiting_feedback':
            unique_id = generate_unique_id()
            message_ids[event.sender_id] = unique_id

            await event.respond(
                "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å–∫–æ—Ä–æ –π–æ–≥–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ.\n\n"
                "üßê–Ø–∫—â–æ —Ü–µ –Ω–µ –≤—Å–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—Å–µ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. –Ø–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n```–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é > –ù–ê–ü–ò–°–ê–¢–òüí¨ > –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è```",
                buttons=[Button.inline('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', '–ì–æ–ª–æ–≤–Ω–µ_–º–µ–Ω—é')]
            )

            sender = await event.get_sender()
            first_name = sender.first_name if sender.first_name else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            last_name = sender.last_name if sender.last_name else ""
            full_name = f"{first_name} {last_name}".strip()
            username = f"@{sender.username}" if sender.username else "–ù–µ–º–∞—î"

            unique_number = message_ids.get(event.sender_id, generate_unique_id())
            message_to_admin = (
                "üì•–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                f"üë§–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {full_name}\n"
                f"üî¢UserID: tg://openmessage?user_id={event.sender_id}\n"
                f"üïµÔ∏èUsername:{username}\n"
                f"‚ôªÔ∏è–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä: #id{unique_number}\n\n"
                f"üì•–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n```{event.message.text}```"
            )

            for admin_id in admin_ids:
                try:
                    await client.send_message(
                        admin_id,
                        message_to_admin,
                        buttons=[
                            Button.inline('–í–Ü–î–ü–û–í–Ü–°–¢–ò', f'–í–Ü–î–ü–û–í–Ü–°–¢–ò_{event.sender_id}'),
                            Button.inline('‚õî –ó–ê–ë–õ–û–ö–£–í–ê–¢–ò‚õî', f'BLOCK_{event.sender_id}'),
                            Button.inline('üü¢–†–û–ó–ë–õ–û–ö–û–í–ê–¢–ò üü¢', f'UNBLOCK_{event.sender_id}')
                        ]
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            user_states[event.sender_id] = 'none'

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("üî•–°–í–Ø–ó–¨ –ó–ê–ü–£–©–ï–ù–êüî•")
client.run_until_disconnected()

